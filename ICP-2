#Program 1
class Employee:
    # Class variable to count the number of employees
    employee_count = 0

    def __init__(self, name, family, salary, department):
        # Instance variables
        self.name = name
        self.family = family
        self.salary = salary
        self.department = department

        # Increment the employee count when a new employee is created
        Employee.employee_count += 1

    def average_salary(self, *salaries):
        # Calculate and return the average salary
        total_salary = sum(salaries) + self.salary
        num_employees = len(salaries) + 1  # Include the current instance
        return total_salary / num_employees


class FullTimeEmployee(Employee):
    # Additional properties for FullTimeEmployee can be added here

    def __init__(self, name, family, salary, department, fulltime_property):
        # Call the constructor of the base class (Employee)
        super().__init__(name, family, salary, department)

        # Additional property specific to FullTimeEmployee
        self.fulltime_property = fulltime_property


# Create instances of Employee class
employee1 = Employee("Priyanka p", "Family1", 50000, "HR")
employee2 = Employee("Jessica e", "Family2", 60000, "IT")

# Call the average_salary function for Employee class
average_salary_employee = employee1.average_salary(employee2.salary)
print(f"Average Salary for Employees: {average_salary_employee}")

# Create instances of FullTimeEmployee class
fulltime_employee = FullTimeEmployee("Alice", "Family3", 70000, "Finance", "FullTimeProperty")

# Call the average_salary function for FullTimeEmployee class
average_salary_fulltime_employee = fulltime_employee.average_salary()
print(f"Average Salary for FullTimeEmployee: {average_salary_fulltime_employee}")

# Print the total count of employees
print(f"Total Employees: {Employee.employee_count}")




# Program2
import numpy as np

# numpy array with random values in 4 by 5 size
randNumArray = np.random.uniform(low=1, high=20, size=(4,5))

# finding the indices with maximum values
maxIndices = np.argmax(randNumArray, axis=1)

# finding the row indices
rowIndices = np.arange(randNumArray.shape[0])

# finding the exact positions of maximium valuesin the array
positionIndices = np.array([rowIndices, maxIndices])

# to convert the array into an array of flat indices
linearIndices = np.ravel_multi_index(positionIndices, randNumArray.shape)

# reshaping the linear array into multi dimensionanl array
randNumArray.reshape((-1))[linearIndices] = 0

print(randNumArray)
     
